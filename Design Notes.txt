Timecards - a small Windows app for tracking your time
======================================================

Summary
-------

At work I use a small app I made using Microsoft Access to track my time.  It's
got a simple window with two tabs:  one tab just has a three-column table for
data entry, and the other tab (which is hidden until you press a button at the
top of the form) is for summarizing the time you've spent.

In the first tab, the table has three columns:  a ticket number, a description,
and the time at which you started working on that ticket.  As a matter of
convention, I use a fake ticket number of "00000" to mean unbilled time, and a
handful of other fake ticket numbers for various things like meetings or self-
education.  For all other time, I enter the ticket number of the case I'm
working on - in our case, since we use JIRA for managing our development, I
enter the JIRA ticket number.  At my last job I used a similar ticket number.

The reporting tab asks for a date range, and then adds all the time together and
displays the total time by ticket number.  I use this to enter the time I've
spent on each ticket in JIRA.  I can also tell from this little report whether
I've spent too much time focused on non-productive work.

This little app has served me well for years.  However, it's always bothered me
that it's in Access, which means it has a fairly large memory footprint.  I
really don't need all the database power (and overhead) that comes with Access
for this little app.

So, I've started this open source project to produce an equivalent app using C#
and SQLite.  The goal is to have a stand-alone app with all the same features,
but with a much smaller footprint.  And if I stick to .NET Core, I should be
able to come up with an application that will work on both Windows and Linux -
and maybe even the Mac platform.  But we'll see.



09/04/2018
----------

Here are some initial criteria and constraints for this project.


Criteria

* The application should launch from a Windows shortcut.  If the database
  doesn't exist, it should create that right at the beginning.

* There should be a minimal set of options:

  - Whether to round the times to the nearest five minutes or to the nearest
    minute when entering a new line in the table;

  - A place for a list of "fake" ticket numbers and default descriptions to
    supply if that ticket number is entered.

* The data entry tab should have a date field for the day and should also
  display the day of the week for the date entered.  Below this should be the
  table for entering rows of time information.

* The data entry form should allow the user to edit and change the ticket
  number, description, and starting time on any row that was entered.

* The user should be able to add new rows to the bottom of the table, and should
  be able to delete any existing row.
  
* It would be nice if there was also a way to insert a row between two existing
  rows, so that if something was forgotten it could be entered without having to
  re-enter data for subsequent rows.

* The data entry tab should have a way of navigating from day to day so that the
  user could review the activity of previous days.

* The reporting tab should ask for a date range and then compute the total time
  spent for each ticket number for that date range.  The date range should
  default to the current day.

* The report should show the total time for each ticket in both minutes and in
  hours (rounded to quarter hours), and there should be total hours at the
  bottom of each of these two columns.


Constraints

* This should be a C# project using .NET Core.

* This should use SQLite as the database engine.  Check to make sure the SQLite
  library is available via NuGet.  Also check the licensing.  (SQLite itself is
  in the public domain, but I don't know about the .NET library that interfaces
  with it.)

* Some initial tests should be conducted to see if Windows Forms and controls
  will work on platforms other than Windows.  This may influence the decision to
  use Windows forms vs. some other UI library such as Qt.  Again, licensing
  should be kept in mind when choosing a library.



09/08/2018
----------

While Microsoft has announced that .NET Core version 3 will have UI components,
it wasn't available at the time I started this project.  I looked into using Qt,
GTK#, and Xamarin.Forms - and all of them have their detractions.  My overall
goal is to keep this project as simple as possible - so I'm going back to .NET
Framework and standard Windows forms.  I'll consider .NET Core again when
version 3 becomes available.



09/19/2018
----------

The biggest challenge so far has been the use of SQLite for a data store. Visual
Studio expects you to use MS SQL Server, of course, so that's always the easiest
path to take.  But with a little determination and some help from StackOverflow
and other sources, I came up with a system that works.  It uses EF and CodeFirst
to create the database on the fly with the first use.

The trickiest part was getting the settings right in app.config.  for those of
you who are interested in using SQLite in your .NET products, you're welcome to
use what I have in this project as an example.

Oddly enough, one of the supposed advantages of using SQLite is that it can work
with an "in-memory" database.  But you can't work with this when using Code
First because the database disappears as soon as the connection is closed - and
since EF and ADO.NET are designed not to keep the connection open all the time,
this doesn't work.  I found a note by the SQLite CodeFirst developers saying
they're not going to address this.  (And I don't blame them.)

But I will say that EF works rather nicely with SQLite once it's configured
properly.  For testing, I just added another connection string - and in the test
setup, I make sure to delete this test database file so that the contents are
predictable.



10/27/2018
----------

I've got the Core project fairly complete, the Data project fairly complete, and
I've got the UI project nearly complete.  The main task remaining is wiring
everything up so that it all works together.

I wanted this application to follow something like the Onion or Hexagonal
architecture, in that the inner Core project would have no references to the
outer "layers" -- namely the Data project and the UI project -- while the outer
layers would have a reference to the inner Core project (but not to each other).

So now the challenge will be to "wire up" the controls to data without violating
this architecture.  I'm not quite sure how I'll do that yet.  I imagine that the
startup program will have to instantiate the data tier, and perhaps make it
available to the Core project via events or something.


The UI project was surprisingly challenging.  I used a DataGridView control to
hold the activities the user will enter.  I learned how to host custom controls
for the Code and Time columns in the grid.  I also learned how to access the
vertical scroll bar control inside the grid so that I could know when it becomes
visible, so I can use its width to adjust the width of the columns.


There's been a design change nagging me since I started this project.  My
original Access project stored the time as a string (e.g., "14:30") -- and I
kept that idea in the original layout of the SQLite table holding activities.
However, I made sure to write the Core Activity class so that you could access
the time as either a string or as the number of minutes since midnight.

As I've been writing this, I've been wondering what the best way would be to
support people who work past midnight.  I've decided to change the storage so
the number of minutes is stored rather than the time.  (The Activity class
should probably also have an "after midnight" flag or something, so that
changing the time doesn't move the activity to the early morning of the previous
day.)

This way, not only will I be able to handle working after midnight, I will also
be in better shape for supporting other time formats besides a 24-hour clock.
This will also make it easier to query in time order from the table.



11/20/2018
----------

I've found the definitive solution to my architecture problem in a video about
Clean Architecture.  The URL is here:

https://www.youtube.com/watch?v=_lwCVE_XgqI

The presenter Jason Taylor of SSW Solutions (https://www.ssw.com.au/) describes
all the principles of clean architecture as laid out by Robert "Uncle Bob"
Martin, but in a format that I found easier to digest.  The same ideas apply:
there should only be dependencies toward the core of the application, and the
core should only use abstractions (usually interfaces in languages that support
them) to reach anything in an outer layer. Dependency injection is used supply
the inner layers with objects of the outer layer.

I believe what I was missing was a clear division of the Application Layer.


In the video, the architecture is laid out as follows:

    +----------------------------+         Presentation:  User interface
   /         Presentation         \
  /    +----------------------+    \       Application:  App-specific types and
 /    /      Application       \    \      logic
|    |   +------------------+   |    |
+----+   |   Domain (Core)  |   +----+     Domain:  Enterprise-wide types and
|    |   +------------------+   |    |     logic
 \    \                        /    /      
  \    +---------+------------+    /       Persistence:  Database or storage
   \ Persistence | Infrastructure /        
    +----------------------------+         Infrastructure:  APIs

Working from the inside out (note, these assume you're working with C# and
Entity Framework):

The Domain contains:
* Domain/enterprise entities (data types describing the business solution)
* Value objects (as opposed to native types, to enforce business rules)
* Enumerations
* Business logic
* Exceptions
* Abstractions (interfaces) to be implemented by the outer layers

The Domain should:
* Be sharable across other applications in the enterprise
* Not know anything about the outside world (data storage, etc.)
* Use data annotations sparingly, if at all
* Use value objects when appropriate
* Initialize all collections and use private setters
* Create custom domain exceptions

--

The Application layer contains:
* Interfaces
* Models
* Logic
* Commands/queries
* Validators
* Exceptions

The Application layer should:
* Contain logic specific to the application (unlike the domain)
* Be independent of presentation, persistence, or infrastructure -- so, it
  should contain abstractions for these
* Employ CQRS where possible (using a separate class for each query or command)
* Jason recommends using MediatR with CQRS so that every action, be it query or
  command, runs through a Request object that allows additional logic both
  before and after the request.  This makes it easy to log or profile any
  activity.
* He also recommends using Fluent Validation to build validation rules.

* Another recommendation is to use DTOs to transfer data to and from the domain,
  rather than the domain objects, since they can be customized for the needs of
  the application.

--

The Domain and Application layers together are referred to as the Core.

--

The Persistence layer contains:
* DbContext
* Database migrations
* Configurations
* Seeding
* Abstractions

The Persistence layer should:
* Be independent of the database
* Should prefer conventions over configuration
* Use Fluent API configuration to keep the data model nice and clean
* Use extensions to apply entity type configurations

--

The Infrastructure layer contains:
* API clients
* File system access
* Email/SMS
* System clock
* Anything external to the application

The Infrastructure layer should:
* Contain classes for accessing external resources
* Implement abstractions defined in inner layers
* Nothing depends on the Infrastructure layer - e.g., not Presentation, and not
  persistence

--

The Presentation layer contains:
* (For web, obviously) SPA, Angular, or React

The Presentation layer should:
* Not have application logic in controllers (again, for the web)
* Create and consume well-defined view models
* Use Open API to bridge the gap between front end and back end

--

It's interesting that Jason recommends a ReadMe.md file in each layer.



11/23/2018
----------

The problem I've been trying to solve is this:  How do you get all the layers to
talk to each other while maintaining a clean architecture?

After much consideration, I've decided that:

   1) I don't need to break the core into domain and application layers.  I
      still have a clean architecture, though without a feature that could be
      shared in the enterprise -- namely, domain classes.

   2) There has to be some feature in the application that knows about all
      layers.  Otherwise, there's no way for an inner layer to request something
      of an outer layer.  This comes up because the outer layers are not allowed
      to reference each other.

This was the main reason for the use of MediatR as discussed in Jason Taylor's
presentation.  If the Presentation layer is not supposed to have any references
to the Persistence layer, then you need some way for the Presentation layer to
give the inner Application layer an implementation of a Persistence layer object
-- needed to retrieve data.

MediatR makes possible a request/response system that is key to CQRS.  But this
requires the mediator -- which is handling each command or query request -- to
know (that is, have references to) all the outer layers, so that one outer layer
can ask another outer layer for something.

It's an entirely different matter if objects of the inner layer can be created
once at the start of the application and survive until the application is
stopped.  If that is the case, then the objects can be "injected" with
implementations they need of the outer layer and just hold onto those objects
and use them as needed.  But that still implies that the part of the application
responsible for startup has access to both the outer and inner layers.

We can't operate this way if we're using Entity Framework and (indirectly)
ADO.NET for our persistence layer.  For scalability reasons, ADO.NET is designed
to be used as needed, not continually -- that is, to operate without a
persistent connection to the database.


So, we need a mediator that knows about all layers.

My solution is this:  Simply move the UI to its own class library.  This means
the UI layer needs only to have a reference to the core, and the data layer also
needs only a reference to the core -- satisfying the requirements of a clean
architecture.

What was originally the UI project can now be just the startup project.  It can
hold references to all layers, and it can contain a mediator object that is
responsible for handling requests coming from the UI layer being fulfilled by
resources from the data layer.

Problem solved -- I hope.  Let's see how the implementation pans out.



01/11/2019
----------

Here's another take on what MediatR tries to accomplish:  a configuration
service.  While the article focuses on .NET Core, I think I could implement such
a service without much trouble.

https://visualstudiomagazine.com/articles/2018/12/01/finding-objects-aspnet-core.aspx



06/07/2019
----------

<rant>Man, I wish I could work on this more consistently.  Too many other things
taking top priority, one right after the other.</rant>

Rather than use MediatR, really all I need is an inversion-of-control container,
or IOC container.  There are a lot of professional packages out there:  Autofac,
Spring.NET, Castle Windsor, etc. - some good, some bad.

But really, all an IOC container needs to be is something that registers
abstract types (interfaces) and corresponding concrete implementations of those
types.  Here are some instructions for building your own IOC container:

https://timross.wordpress.com/2010/01/21/creating-a-simple-ioc-container/



10/05/2019
----------

I finally implemented that inversion-of-control (IOC) container - really, an
object factory - and it works like a charm.  Now I have a way for the inner
layers to request and make use of objects from the outer layer, all while
maintaining the loose coupling that is the hallmark of clean architecture.

Hey, remember when I described the application layer of clean architecture in
November last year?  That layer is supposed to act as a go-between so that the
core and the outer layers don't talk to each other directly.  This allows the
UI, for example, to be changed without having to rewrite almost all the
application.

Well, once I had a working IOC factory, I implemented a few "logic" classes that
act as go-between UI layer.  Objects of these classes use the IOC factory to get
a repository and do the CRUD (create, retrieve, update, and delete) work for
timecards, for getting a report of the timecards, and for doing bulk data
operations (imports and exports).  I simultaneously developed integration tests
to go with these new classes.

These new logic classes reside in the Core project, but they're effectively
separate from the rest of the core.  In a bigger application I suppose there
would be a good reason for these to be in their own project, but this will do
for my application. 

With the logic classes - and unit and integration tests to prove them out - it's
become dead simple to implement features in the UI.  At this point I have data
entry, navigation, and reporting all working.  It's actually a usable
application at this point, though there is quite a bit to finish before it's
completed:

* I need to finish the bulk data import and export functions.  This will mean
  I need to complete the third of those three logic classes.

* I need to implement the Configuration form, and make sure the user can specify
  where the database is to be stored.

* have a hard-coded color "tint" that's applied to activities that occur after
  midnight.  These are an important visual cue for the user.  That tint ought
  not to be hard-coded, however - I'll need to add a color chooser to the
  Configuration form.

* Speaking of midnight, I need to make sure that flag is set for any actions
  that are created after midnight.  The activity object will need a (loosely-
  coupled?) way to query the timecard parent for its date to make this possible.

* I need to add more comments, especially the triple-slash kind so that
  IntelliSense will work.

* I ought to fill out the markdown "read me" documents in each project.

* There's a code analysis feature built into Visual Studio - and it makes some
  good suggestions.  I should go through the code and address the points it
  makes.

* I learned a long time ago that in a Windows application, every method that's
  executed by a user action - like a button click event - ought to have its own
  exception processing for gracefully handling errors.  While I've added a
  global exception processor, that's supposed to be there as a last resort.

* I need to pick a better icon for the application.

* I need to add version number to all the components of the application.

* I need to figure out packaging and deployment.  I know Visual Studio
  Professional has some options for creating installers and whatnot - does the
  community edition have that?  If not, there are open-source third party
  options like Wix Toolset.

That's not an exhaustive list - I'm sure there will be more.



11/29/2019
----------

This is the point in an application's life cycle historically called the "death
march".  There are a lot of features that are complete, but there a lot of
features that need completing - along with a lot of bugs found in alpha testing.
What remains is slogging through the remaining issues in the pursuit of the
shipping deadline.

This is the time where you don't want to find design flaws.  This is the time
where on each issue, especially major ones, you must decide to solve the issue
or postpone it until the next release.

Fortunately, in my case, this is purely a personal project and there are no
actual shipping deadlines.  But I really have my heart set on making the first
release of this program available by the end of the year, because I'd like to
make use of it at work.


So, below is a checklist of items that need completing or fixing. This list will
change rapidly as I work on the project.  It is in no particular order, other
than items as they come to mind or are discovered.  Note that for the list
below,

  "[ ]" is an unchecked box (needing to be completed)
  "[/]" means checked (completed)
  "[X]" means skipped (decided not to do it)
  "[o]" means partially completed
  "[N]" means it can wait until the next release



TO DO
-----

[/] Support for 12-hour as well as 24-hour time formats
[ ] Make items entered by UI after midnight to be marked as such
[ ] Resolve intermittent error that causes program-stopping exception
[ ] Show program-stopping exception in a custom window that allows copy/paste
[ ] Complete "About" dialog
[ ] Find a way to show help information (most likely a web page, not CHM)
[ ] Set up version numbers in each component
[ ] Revise the icon - it looks terrible
[ ] Finish the bulk data import
[ ] Finish the bulk data export
[X] Change configuration screen to let user specify where database is
[ ] Find app.config setting to allow db to exist in user files
[ ] Code refactoring: make "using" abbreviations consistent across all projects
[ ] Code refactoring: add comments where they ought to exist
[ ] Fill in the "readme" markdown text files in each project
[ ] Figure out how to make an installation package (Wix? VS? Other?)
[ ] Code refactoring: look for potential null reference causes and fix them
[/] Look for remaining "TODO" comments in code and address them
[ ] Add an option to report tab for rounding hours to nearest .1, .25, etc.
[ ] Make entire UI DPI-aware
[ ] The "after midnight" control (^M) seems to hit the wrong Activities row

